"=============================================================================
" vimrc.after
"-----------------------------------------------------------------------------

" remap to , for command prefix
let mapleader=","

" Map anonymous clipboard to system clipboard. NOTE that this relies on VIM
" being compiled with +clipboard (which on Mac means 'brew install vim' :)
set clipboard=unnamed

" Disable visual bell display
set visualbell t_vb=

" Let the mouse work when we're working with splits.
set mouse=a

" I'm not a fan of folds. Turn off opening with everything folded.
set foldlevel=99



"" Make it easy to edit this file and re-source it in as well as colorscheme.
nmap <leader>vv :sp $HOME/.vimrc.after<CR>
nmap <leader>vs :source $HOME/.vimrc.after<CR>
nmap <leader>vc :sp $HOME/.janus/idearat/colors/idearat.vim<CR>
nmap <leader>vn :sp $HOME/.janus/idearat/syntax/javascript.vim<CR>

" Configure vim-airline plugin.
set rtp+=/usr/local/src/powerline/powerline/bindings/vim
let g:airline_powerline_fonts = 1
let g:bufferline_echo = 0
set laststatus=2
set ttimeoutlen=50

" Default to 4 space indents. Do this early so editorconfig can override.
set expandtab list tabstop=4 softtabstop=4 shiftwidth=4

" Adjust 'non-conforming' whitespace display.
set listchars=tab:â–¸\ ,trail:.,extends:>,precedes:<

" Remove trailing whitespace on save by default.
autocmd BufWritePre * :%s/\s\+$//e

" Show numbers, and cursor lines.
set number
set cursorline
set nohidden
set nojoinspaces
set wildmode=longest,list
set showmode
set mousehide
set lazyredraw
set noignorecase
set wildignore+=node_modules
set textwidth=80

" Colorize lines longer than 80 chars.
match ErrorMsg '\%>80v.\+'

" Make it easier to debug coloring issues by putting highlight group
" on the status line.
function! SyntaxItem()
    return synIDattr(synID(line("."),col("."),1),"name")
endfunction
set stl=%f\ %m\ %r\ Line:%l/%L[%p%%]\ Col:%c\ Buf:%n\ [%b][0x%B]\ %{SyntaxItem()}

" Ignore ex mode, use for formatting.
map Q gq
set formatoptions=tcroq

"set indentexpr=""

" Tell syntastic to update the location list.
let g:syntastic_always_populate_loc_list = 1

" Map arrow keys when using syntax checking.
map <Left> :lprev<CR>
map <Right> :lnext<CR>

" Open Marked.app on the current file
:nnoremap <leader>m :silent !open -a Marked.app '%:p'<cr>

set tags=./tags,tags;/

map <leader>t :CtrlPMixed<CR>

au VimLeave * if filereadable("~/vim/vim/.netrwhist")|call delete("[path here]/.netrwhist")|endif

"=============================================================================
