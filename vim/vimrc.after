" =============================================================================
" vimrc.after
" -----------------------------------------------------------------------------

" This file is loaded after pathogen plugins have loaded by virtue of an autocmd
" configured for BufReadPost on all files (see ~/.vimrc). Content here can still
" be overridden by anything that loads as a result of the commands in this file
" so try to keep content here to set/let/map operations and don't load code. If
" you need to load things it's best to put them into a plugin format and place
" them in the ~/.vim/bundle directory.

" ---
" Controls
" ---

" Map , to command prefix.
let mapleader=","

" Map anonymous clipboard to system clipboard. NOTE that this relies on VIM
" being compiled with +clipboard (which on Mac means 'brew install vim' :)
set clipboard=unnamed

" Let the mouse work.
set mouse=a

" Turn off mouse while typing.
set mousehide

" Make it easy to edit this file and re-source it in (and other vim configs).
nmap <leader>vv :sp $HOME/.vimrc.after<cr>
nmap <leader>vs :source $HOME/.vimrc.after<cr>
nmap <leader>vc :sp $HOME/.janus/idearat/colors/idearat.vim<cr>
nmap <leader>vn :sp $HOME/.janus/idearat/syntax/javascript.vim<cr>

" ---
" Buffers
" ---

" Turn off buffer hiding. I prefer to assume I'm done when I close a buffer.
set nohidden

" Echo full file name in status line.
:noremap <leader>f :echo @%<cr>

" Run commands and output them into a scratch buffer for easier viewing.
function! s:Scratch (command, ...)
   redir => lines
   let saveMore = &more
   set nomore
   execute a:command
   redir END
   let &more = saveMore
   call feedkeys("\<cr>")
   new | setlocal buftype=nofile bufhidden=hide noswapfile
   put=lines
   if a:0 > 0
      execute 'vglobal/'.a:1.'/delete'
   endif
   if a:command == 'scriptnames'
      %substitute#^[[:space:]]*[[:digit:]]\+:[[:space:]]*##e
   endif
   silent %substitute/\%^\_s*\n\|\_s*\%$
   let height = line('$') + 3
   execute 'normal! z'.height."\<cr>"
   0
endfunction

command! -nargs=? Scriptnames call <sid>Scratch('scriptnames', <f-args>)
command! -nargs=+ Scratch call <sid>Scratch(<f-args>)

" ---
" Editing
" ---

" Set the function/expression used to determine indent.
" TODO: Write something that doesn't frustrate me too much :)
set indentexpr=""

" Make text joining work a bit more code-like and avoid spaces.
set nojoinspaces

" ---
" Layout / Viewing
" ---

" I'm not a fan of folds on startup, I like to see the whole file on open.
set foldlevel=99

" Make preview area slightly bigger (default is 12). This helps things like
" fugitive and buffergator to show more by default.
set previewheight=24

" Show numbers, and cursor lines to help my old tired eyes find their place.
set number
set cursorline

" Show the current mode. Yeah yeah, modes are the root of all evil. Whatever.
set showmode

" Don't overdo the redraw thing when running macros etc. We can always use
" Ctrl-L when we need to.
set lazyredraw

" Disable visual bell display.
set visualbell t_vb=

" ---
" Navigation
" ---

" Let vim know about typical suffices in node.js require() calls.
:set suffixesadd+=.js,.json

" Let vim know where node.js looks for files so we can gf to require()'s.
:let &path.=join(reverse(split($NODE_PATH, ":")), ",")

" Open the file under the cursor, even if it's in a node lookup path. Note that
" this currently depends on idearat's fork of vim-node and proper settings for
" suffixesadd and path which point into the local codebase.
nmap <leader>o :NodeGotoFile<cr>

" Buffer traversal via movement keys.
map <C-J> :bnext<cr>
map <C-K> :bprev<cr>
map <C-L> :tabn<cr>
map <C-H> :tabp<cr>

" ---
" Searching
" ---

" Get vim help on word under cursor.
map <leader>h :help <c-r><c-w><cr>

" Jump quickly to help show there's a potential match, and highlight it.
set incsearch
set hlsearch

" Make it easy to toggle the search highlighting setting.
:noremap <leader>s :set hlsearch! hlsearch?<cr>

" In general I don't want to miss potential matches so ignore case.
"TODO: explore smartcase and/or a toggle for this.
set ignorecase

" Configure tab completion to match my typical preference.
set wildmode=longest,list:full
set wildignore+=node_modules

" ---
" Style
" ---

" Ignore ex mode mapping of this key, use if for formatting.
map Q gq

" Make sure we get autowrapping etc.
set formatoptions=tcroq

" Colorize lines longer than 80 chars.
match ErrorMsg '\%>80v.\+'

" Set to match our long-line colorizing rule.
set textwidth=80

" Default to 4 space indents (TIBET style). Filetype mappings and editorconfig
" should override when they have explicit mappings.
set expandtab list tabstop=4 softtabstop=4 shiftwidth=4

" Adjust 'non-conforming' whitespace display so things jump out.
set listchars=tab:â–¸\ ,trail:.,extends:>,precedes:<

" Make it easy to work across various files/formats by toggling settings.
map <leader>l :set list!<cr>
map <leader>x :set expandtab!<cr>

" Make it easy to adjust indent/tab sizes for a specific file.
function! Indent(size)
  let l:size = str2nr(a:size)
  let &tabstop = eval(l:size)
  let &softtabstop = eval(l:size)
  let &shiftwidth = eval(l:size)
endfunction
command! -nargs=1 -buffer Indent :call Indent <args>

" Remove trailing whitespace on save by default.
autocmd BufWritePre * :%s/\s\+$//e

" ---
" vim-airline (nice powerline-inspired vim status line)
" ---

" Configure vim-airline plugin. NB: some settings are done in the ~/.vimrc file
" to force them to be read when the plugin first loads.
let g:airline_powerline_fonts = 1

set rtp+=/usr/local/src/powerline/powerline/bindings/vim

" Make it easier to debug coloring issues by putting highlight group
" on the status line.
" TODO: add this to the updated powerline-based status bar config.
function! SyntaxItem()
    return synIDattr(synID(line("."),col("."),1),"name")
endfunction

let g:airline_section_x = airline#section#create([ '%{SyntaxItem()} %y' ])
let g:airline_section_y = airline#section#create([ '%l:%c 0x%B' ])
let g:airline_section_z = airline#section#create([ '%n' ])

" ---
" Buffergator (show/traverse buffer list)
" ---

" Configure buffergator the way I like it.
let g:buffergator_viewport_split_policy = 'T'

" Don't close buffer window on selection, rely on ,b toggle.
let g:buffergator_autodismiss_on_select = 0

" Use ,b to toggle the buffer selection window.
map <leader>b :BuffergatorToggle<cr>

" ---
" Ctags etc. (jump to definitions across files)
" ---

set tags=./tags,tags;/

" Open the tag stack quickly.
map <leader>t :tselect<cr>

" ---
" vim-fugitive (the ultimate vim/git integration tool)
" ---

" Map some nicer fugitive key bindings.
nmap <leader>gb :Gblame<cr>
nmap <leader>gg Ggrep<cr>
nmap <leader>gs :Gstatus<cr>

" ---
" Gundo (access the vim 7.0+ undo tree)
" ---

" Toggle the undo tree.
map <leader>u :GundoToggle<CR>

" ---
" NERDTree (access the file system)
" ---

" Toggle the file/directory tree.
map <leader>n :NERDTreeToggle<CR>

" ---
" promptline (build nice zsh prompts)
" ---

let g:promptline_powerline_symbols = 1
let g:promptline_theme = 'airline'
let g:promptline_preset = {
    \'a' : [ promptline#slices#host() ],
    \'b' : [ promptline#slices#user() ],
    \'c' : [ promptline#slices#cwd() ],
    \'x' : [ promptline#slices#jobs() ],
    \'y' : [ promptline#slices#vcs_branch(), promptline#slices#git_status() ],
    \'warn' : [ promptline#slices#last_exit_code(), promptline#slices#battery() ]}

" ---
" Syntastic (dynamic syntax checking)
" ---

" Tell syntastic to update the location list.
let g:syntastic_always_populate_loc_list = 1

" Map arrow keys when using syntax checking.
map <Left> :lprev<cr>
map <Right> :lnext<cr>

" ---
" Tmuxline
" ---

let g:tmuxline_theme = 'airline'
let g:tmuxline_preset = {
      \'a'    : '#(curl ipv4.icanhazip.com)',
      \'b'    : '#S',
      \'c'    : '#P',
      \'win'  : '#I #W',
      \'cwin' : '#I #W',
      \'x'    : '%a',
      \'y'    : '%d-%b-%y',
      \'z'    : '%H:%M'}

" ---
" File types
" ---

" override any file types we care about
augroup filetypedetect
  " No, I don't edit modula2 very often, thanks ;).
  autocmd BufNewFile,BufRead *.markdown set filetype=markdown
  autocmd BufNewFile,BufRead *.md set filetype=markdown

  " Gemfile, Isolate, Vagrantfile and config.ru are ruby
  autocmd BufNewFile,BufRead Gemfile     setfiletype ruby
  autocmd BufNewFile,BufRead Isolate     setfiletype ruby
  autocmd BufNewFile,BufRead Vagrantfile setfiletype ruby
  autocmd BufNewFile,BufRead config.ru   setfiletype ruby

  " Configuration files for vim should be vim types.
  autocmd BufNewFile,BufRead ~/.vim/*  setfiletype vim
  autocmd BufNewFile,BufRead .vim* setfiletype vim
augroup END

" don't show whitespace in help files, it's distracting :).
autocmd FileType help set nolist

" I really don't like these files :)
autocmd VimLeave * if filereadable("~/.vim/.netrwhist")|call delete("~/.vim/.netrwhist")|endif

" Force system to re-detect using new filetype mappings.
filetype detect

" Allow any local changes to override. This allows for configuration specific to
" a particular work environment or machine (company laptop etc.)
if filereadable("~/.vimrc.local")|source ~/.vimrc.local|endif

" Maintain the same line in/out of vim and tmux.
Tmuxline

"=============================================================================
