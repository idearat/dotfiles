/** ============================================================================
 * @file keybindings.json
 * @overview Keybindings for Windsurf - a Vim-like user experience for VSCode.
 * @copyright 2025 Scott H. Shattuck
 * @license MIT
 * -------------------------------------------------------------------------- */

/*
 * This file augments the default keybindings of VSCode and its Vim plugin.
 * Augmentation focuses on AI, command palette, and git access; file, panel,
 * and window management; and other aspects of the Vim user experience.
 *
 * REQUIRED:
 *   Windsurf / Cascade (fork of VSCode)
 *   VSCode Vim plugin (Vim-like keybindings, primarly for text editor)
 *
 * RECOMMENDED:
 *   VSCode FindItFaster extension (search via rg, fzf, bat, et al)
 *   VSCode Rewrap extension (easier wrapping of comment text etc.)
 *
 * OPTIONAL:
 *   VSCode Atlassian extension (easy Bitbucket and Jira integration)
 *   VSCode GitLens extension (more powerful git integration tools)
 *
 * A settings.json file accompanying this file can be used to configure
 * additional behavior such as configuring 'jj' to send <ESC> etc. The
 * settings.json file also has config options for recommended extensions.
 */

// HINT: you might want to drag the Cascade, Search, and SCM views into the
// lower panel for more convenient access and less sidebar clutter. I find
// keeping the top in Zen Mode and the panel open works best for my workflow.

[
  // ---------------------------------------------------------------------------
  // VIM Command keys (ala ':' but for vscode command palette access)
  // ---

  // NOTE: ';' is mapped to ':' in the settings.json file as a shortcut for
  // accessing the Vim command line.

  // Access VSCode command palette from anywhere.
  {
    "key": "cmd+;",
    "command": "workbench.action.showCommands",
    "comment": "vim: cmd+; (command palette)"
  },

  // ---------------------------------------------------------------------------
  // VIM leader mappings
  // ---

  // ---
  // Leader key (vim: leader)
  // ---

  {
    "key": "space",
    "command": "nothing",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>"
  },

  // If there was a "telescope" for VSCode that'd be mapped here. The next
  // best thing is the command palette without any pre-selection.
  {
    "key": "space space",
    "command": "workbench.action.quickOpen",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>space (command palette)"
  },

  // ---------------------------------------------------------------------------
  // Atlassian operations
  // ---

  // These are pretty limited... but searching for a Jira issue comes in handy
  // when you're coding and a PM asks about one :).

  {
    "key": "space a a",
    "command": "workbench.view.extension.atlascode-drawer",
    "when": "viewContainer.workbench.view.extension.atlascode-drawer.enabled && editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>aa (show Atlassian drawer)"
  },

  // NOTE: the search fails if the drawer hasn't been opened at least once, so
  // the approach here simply opens the drawer prior to searching.
  {
    "key": "space a f",
    "command": "runCommands",
    "args": {
      "commands": [
        "workbench.view.extension.atlascode-drawer",
        "atlascode.jira.searchIssues"
      ]
    },
    "when": "viewContainer.workbench.view.extension.atlascode-drawer.enabled && editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>af (find Jira issue)"
  },

  {
    "key": "space a i",
    "command": "atlascode.jira.createIssue",
    "when": "viewContainer.workbench.view.extension.atlascode-drawer.enabled && editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>ai (create Jira issue)"
  },

  {
    "key": "space a p",
    "command": "atlascode.bb.createPullRequest",
    "when": "viewContainer.workbench.view.extension.atlascode-drawer.enabled && editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>ap (create bitbucket pr)"
  },

  {
    "key": "space a s",
    "command": "atlascode.showConfigPage",
    "when": "viewContainer.workbench.view.extension.atlascode-drawer.enabled && editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>as (Atlassian settings)"
  },

  // ---------------------------------------------------------------------------
  // Buffer/Editor operations (vim: leader + b prefix)
  // ---

  {
    "key": "space b c",
    "command": "workbench.action.closeActiveEditor",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>bc (close buffer)"
  },

  {
    "key": "space b shift+c",
    "command": "workbench.action.revertAndCloseActiveEditor",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>bC (force close buffer)"
  },

  {
    "key": "space b f",
    "command": "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>bf (find buffer)"
  },

  {
    "key": "space b n",
    "command": "workbench.action.nextEditorInGroup",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>bn (next buffer)"
  },

  {
    "key": "space b shift+n",
    "command": "workbench.action.files.newUntitledFile",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>bN (new buffer)"
  },

  {
    "key": "space b o",
    "command": "workbench.action.closeOtherEditors",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>bo (close other buffers)"
  },

  {
    "key": "space b p",
    "command": "workbench.action.previousEditorInGroup",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>bp (previous buffer)"
  },

  {
    "key": "space b r",
    "command": "workbench.action.reopenClosedEditor",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>br (reopen buffer)"
  },

  // ---------------------------------------------------------------------------
  // Cascade AI
  // ---

  // NOTE: there are additional keybindings for accepting/rejecting suggestions
  // from Windsurf's AI assistant in the "Suggestions" section toward the end of
  // this file.

  {
    "key": "space c c",
    "command": "windsurf.prioritized.chat.open",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>cc (cascade chat)"
  },

  {
    "key": "space c d",
    "command": "windsurf.openDocs",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>cd (cascade docs)"
  },

  {
    "key": "space c e",
    "command": "windsurf.prioritized.explainProblem",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>ce (cascade explain)"
  },

  {
    "key": "space c f",
    "command": "windsurf.openFeedback",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>cf (cascade feedback)"
  },

  {
    "key": "space c g",
    "command": "windsurf.openGlobalRules",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>cg (cascade global rules)"
  },

  {
    "key": "space c i",
    "command": "windsurf.prioritized.command.open",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>ci (cascade instruct)"
  },

  {
    "key": "space c n",
    "command": "windsurf.prioritized.chat.openNewConversation",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>cn (cascade new chat)"
  },

  {
    "key": "space c s",
    "command": "windsurf.openQuickSettingsPanel",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>cs (cascade settings)"
  },

  {
    "key": "space c w",
    "command": "windsurf.openWorkspaceRules",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>cw (cascade workspace rules)"
  },

  // ---------------------------------------------------------------------------
  // Debug
  // ---

  {
    "key": "space d",
    "command": "runCommands",
    "args": {
      "commands": [
        "workbench.view.debug",
        "workbench.panel.repl.view.focus"
      ]
    },
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>d (debug)"
  },

  // ---------------------------------------------------------------------------
  // Explorer
  // ---

  {
    "key": "space e",
    "command": "runCommands",
    "args": {
      "commands": [
        "workbench.view.explorer",
        "workbench.files.action.focusFilesExplorer"
      ]
    },
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual') && viewContainer.workbench.view.explorer.enabled",
    "comment": "vim: <leader>e (focus explorer)"
  },

  {
    "key": "/",
    "command": "list.find",
    "when": "listFocus && !inputFocus",
    "comment": "vim: / (find in list)"
  },

  {
    "key": "ctrl+n",
    "command": "list.focusDown",
    "when": "explorerViewletFocus",
    "comment": "vim: <C-n> (next item)"
  },

  {
    "key": "ctrl+p",
    "command": "list.focusUp",
    "when": "explorerViewletFocus",
    "comment": "vim: <C-p> (prev item)"
  },

  {
    "key": "enter",
    "command": "runCommands",
    "args": {
      "commands": [
        "list.closeFind",
        "list.select",
        "explorer.openAndPassFocus",
      ]
    },
    "when": "explorerViewletFocus && !inputFocus",
    "comment": "open file"
  },

  {
    "key": "shift+enter",
    "command": "runCommands",
    "args": {
      "commands": [
        "list.closeFind",
        "list.select",
        "renameFile",
      ]
    },
    "when": "explorerViewletFocus && !inputFocus",
    "comment": "rename file"
  },

  // ---------------------------------------------------------------------------
  // Find operations (vim: leader + f prefix)
  // ---

  {
    "key": "space f b",
    "command": "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>fb (find buffer)"
  },

  {
    "key": "space f f",
    "command": "find-it-faster.findFiles",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>ff (find file(s))"
  },

  {
    "key": "space f shift+f",
    "command": "find-it-faster.findFilesWithType",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>fF (find file(s) of type)"
  },

  {
    "key": "space f w",
    "command": "find-it-faster.findWithinFiles",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>fW (word in files)"
  },

  {
    "key": "space f shift+w",
    "command": "find-it-faster.findWithinFilesWithType",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>fW (word in files of type)"
  },

  // ---------------------------------------------------------------------------
  // Git (scm)
  // ---

  // NOTE: this section relies on built-in SCM git features. GitLens keybindings
  // are mapped to 'space l *' and offer quite a few additional features.

  {
    "key": "space g ;",
    "command": "workbench.action.quickOpen",
    "args": "> git ",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual') && !gitlens:disabled && config.gitlens.keymap == 'chorded'",
    "comment": "vim: <leader>g; (git commands)"
  },

  {
    "key": "space g h",
    // show source control repositories in panel viewer
    "command": "workbench.view.scm",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>gh (git home)"
  },

  {
    "key": "space g l",
    "command": "git.pullFrom",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>gl (git pull)"
  },

  {
    "key": "space g p",
    "command": "git.pushTo",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>gp (git push)"
  },

  // ---------------------------------------------------------------------------
  // Help
  // ---

  {
    "key": "space h",
    "command": "vscode.open",
    "args": "https://docs.codeium.com/windsurf/getting-started",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>h (help - windsurf)"
  },

  {
    "key": "space shift+h",
    "command": "vscode.open",
    "args": "https://code.visualstudio.com/docs/",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>h (help - vscode)"
  },

  // ---------------------------------------------------------------------------
  // I ???
  // ---

  // TODO: add I ???
  {
    "key": "space i",
    "command": "???",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>i (???)"
  },

  // ---------------------------------------------------------------------------
  // JSON ???
  // ---

  {
    "key": "space j",
    "command": "???",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>j (???)"
  },

  // ---------------------------------------------------------------------------
  // Keybindings
  // ---

  {
    "key": "space k",
    "command": "workbench.action.openGlobalKeybindings",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>k (show keybindings)"
  },

  {
    "key": "space shift+k",
    "command": "vscode.open",
    "args": {
      "uri": "/Users/ss/Library/Application Support/Windsurf/User/keybindings.json"
    },
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>K (show keybindings file)"
  },

  // ---------------------------------------------------------------------------
  // L(ens) aka GitLens
  // ---

  {
    "key": "space l ;",
    "command": "gitlens.gitCommands",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual') && !gitlens:disabled && config.gitlens.keymap == 'chorded'",
    "comment": "vim: <leader>l; (lens commands)"
  },

  {
    "key": "space l d",
    "command": "gitlens.diffWithPrevious",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>ld lens diff w/ previous)"
  },

  {
    "key": "space l shift+d",
    "command": "gitlens.diffWithWorking",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>lD (lens diff with working)"
  },

  {
    "key": "space l g",
    "command": "gitlens.showGraphView",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>lg (lens graph)"
  },

  {
    "key": "space l h",
    "command": "gitlens.views.home.focus",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>lh (lens home)"
  },

  {
    "key": "space l i",
    "command": "gitlens.showCommitDetailsView",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>li (lens inspect)"
  },

  {
    "key": "space l l",
    "command": "gitlens.pullRepositories",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>gl (lens pull)"
  },

  {
    "key": "space l p",
    "command": "gitlens.pushRepositories",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>gp (lens push)"
  },

  {
    "key": "space l s",
    "command": "gitlens.showQuickRepoStatus",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>ls (lens status)"
  },

  {
    "key": "space l t",
    "command": "gitlens.toggleFileChanges",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>gt (lens toggle changes)"
  },

  // ---------------------------------------------------------------------------
  // Markdown
  // ---

  {
    "key": "space m",
    "command": "markdown-preview-enhanced.openPreviewToTheSide",
    "when": "editorLangId == 'markdown' && editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>m (markdown preview)"
  },

  {
    "key": "space shift+m",
    "command": "markdown-preview-enhanced.openPreview",
    "when": "editorLangId == 'markdown' && editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>m (markdown preview)"
  },

  // ---------------------------------------------------------------------------
  // Notifications
  // ---

  {
    "key": "space n",
    "command": "notifications.toggleList",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>n (show notifications)"
  },

  {
    "key": "space shift+n",
    "command": "notifications.clearAll",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>N (clear notifications)"
  },

  // ---------------------------------------------------------------------------
  // O ???
  // ---

  // TODO: add O ???
  {
    "key": "space o",
    "command": "???",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>o (???)"
  },

  // ---------------------------------------------------------------------------
  // P ???
  // ---

  // TODO: add P ???
  {
    "key": "space p",
    "command": "???",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>p (???)"
  },

  // ---------------------------------------------------------------------------
  // Quit operations
  // ---

  {
    "key": "space q",
    "command": "workbench.action.closeActiveEditor",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>q (quit buffer)"
  },

  {
    "key": "space shift+q",
    "command": "workbench.action.revertAndCloseActiveEditor",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>Q (force quit buffer)"
  },

  // ---------------------------------------------------------------------------
  // Reopen
  // ---

  {
    "key": "space r",
    "command": "workbench.action.reopenClosedEditor",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>r (reopen editor)"
  },

  // ---------------------------------------------------------------------------
  // Settings
  // ---

  {
    "key": "space s",
    "command": "workbench.action.openGlobalSettings",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>s (user settings)"
  },

  {
    "key": "space shift+s",
    "command": "workbench.action.openSettingsJson",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>js (json settings)"
  },

  // ---------------------------------------------------------------------------
  // Test Panel
  // ---

  {
    "key": "space t",
    "command": "workbench.view.testing.focus",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>t (testing)"
  },

  // TODO: add ctrl keys specific to testing panel?

  // ---------------------------------------------------------------------------
  // Update(s)
  // ---

  {
    "key": "space u w",
    "command": "windsurf.checkForUpdates",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>uw (windsurf updates)"
  },

  {
    "key": "space u x",
    "command": "workbench.extensions.action.checkForUpdates",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>ux (extension updates)"
  },

  // ---------------------------------------------------------------------------
  // View {x}
  // ---

  {
    "key": "space v b",
    "command": "workbench.action.toggleSidebarVisibility",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>vb (toggle sidebar)"
  },

  {
    "key": "space v c",
    "command": "workbench.action.customizeLayout",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>vc (ui config)"
  },

  {
    "key": "space v o",
    "command": "workbench.panel.output.focus",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>vo (output panel)"
  },

  {
    "key": "space v p",
    "command": "workbench.panel.markers.view.focus",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>vp (problem panel)"
  },

  {
    "key": "space v s",
    "command": "workbench.action.toggleStatusbarVisibility",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>vs (toggle statusbar)"
  },

  {
    "key": "space v t",
    "command": "workbench.action.terminal.focus",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>vt (terminal)"
  },

  {
    "key": "space v x",
    "command": "workbench.extensions.action.showEnabledExtensions",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>vx (view extensions)"
  },

  // ---------------------------------------------------------------------------
  // Write
  // ---

  {
    "key": "space w",
    "command": "workbench.action.files.save",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>w (save)"
  },

  {
    "key": "space shift+w",
    "command": "workbench.action.files.saveAll",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>W (save all)"
  },

  // ---------------------------------------------------------------------------
  // X (write and close)
  // ---

  {
    "key": "space x",
    "command": "runCommands",
    "args": {
      "commands": [
        "workbench.action.files.save",
        "workbench.action.closeActiveEditor"
      ]
    },
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>x (save and close)"
  },

  {
    "key": "space shift+x",
    "command": "runCommands",
    "args": {
      "commands": [
        "workbench.action.files.saveAll",
        "workbench.action.closeAllEditors"
      ]
    },
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>X (save and close all)"
  },

  // ---------------------------------------------------------------------------
  // Y ???
  // ---

  // TODO: add Y ???
  {
    "key": "space y",
    "command": "???",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>y (???)"
  },

  // ---------------------------------------------------------------------------
  // Fold/Unfold
  // ---

  // Lowercase version of vim 'zM' for fold all (for convenience)
  {
    "key": "space z m",
    "command": "editor.fold",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>zm (fold)"
  },
  {
    "key": "space z shift+m",
    "command": "editor.fold",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>zM (fold)"
  },

  // Lowercase version of vim 'zR' for unfold all (for convenience)
  {
    "key": "space z r",
    "command": "editor.unfold",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>zr (unfold)"
  },
  {
    "key": "space z shift+r",
    "command": "editor.unfold",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>zR (unfold)"
  },

  // ===========================================================================

  // ---------------------------------------------------------------------------
  // Cmd Keys
  // ---

  // Quick open of explorer
  {
    "key": "cmd+e",
    "command": "runCommands",
    "args": {
      "commands": [
        "workbench.view.explorer",
        "workbench.files.action.focusFilesExplorer"
      ]
    },
    "comment": "vim: <C-e> (editor)"
  },

  // Quick reset to "main" view
  {
    "key": "cmd+m",
    "command": "runCommands",
    "args": {
      "commands": [
        "workbench.action.closeSidebar",
        "workbench.action.terminal.focus",
        "workbench.action.exitZenMode",
        "workbench.action.toggleZenMode",
        "workbench.action.focusActiveEditorGroup",
      ]
    },
    "comment": "vim: <C-m> (main)"
  },

  // Quick open of task runner
  {
    "key": "cmd+r",
    "command": "workbench.action.tasks.runTask",
    "comment": "vim: <C-r> (run task)"
  },

  // Quick focus on a terminal
  {
    "key": "cmd+t",
    "command": "workbench.action.terminal.focus",
    "comment": "vim: <C-t> (terminal)"
  },

  // Quick open of dev tools
  {
    "key": "cmd+k cmd+i",
    "command": "workbench.action.toggleDevTools",
    "comment": "vim: <C-k><C-i> (dev tools)"
  },

  // Cmd+K is typical in iterm2v3 et. al., here we double it to clear terminal
  {
    "key": "cmd+k cmd+k",
    "command": "workbench.action.terminal.clear",
    "when": "terminalFocus && terminalHasBeenCreated",
    "comment": "iterm2v3: <C-k><C-k> (clear terminal)"
  },

  // ---------------------------------------------------------------------------
  // Ctrl Keys
  // ---

  // SEE ALSO: the <leader>f keybindings for "find buffer" etc.
  {
    "key": "ctrl+tab",
    "command": "-workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup",
    "when": "!activeEditorGroupEmpty"
  },

  // remap ctrl+tab/shift+tab to next/previous tab... you can use space+f+b to
  // bring up "find buffer" dialog to switch the default ctrl+tab/shift+tab way.
  // NOTE: you can also use cmd+alt+right and cmd+alt+left for tab navigation
  {
    "key": "ctrl+tab",
    "command": "workbench.action.nextEditor",
    "when": "!terminalFocus",
    "comment": "iterm2v3: <C-tab> (next tab)"
  },

  {
    "key": "ctrl+shift+tab",
    "command": "workbench.action.previousEditor",
    "when": "!terminalFocus",
    "comment": "iterm2v3: <C-shift-tab> (previous tab)"
  },

  {
    "key": "ctrl+shift+8",
    "command": "runCommands",
    "args": {
      "commands": [
        "editor.action.addSelectionToNextFindMatch",
        "workbench.action.findInFiles"
      ]
    },
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: ctrl+shift+8 (find all references)"
  },

  // disable navigate back via ctrl+-
  {
    "key": "ctrl+-",
    "command": "-workbench.action.navigateBack",
  },

  {
    "key": "ctrl+-",
    "command": "editor.action.commentLine",
    "when": "editorTextFocus && !editorReadonly && editor.hasSelection",
    "comment": "vim: ctrl+- (toggle commenting)"
  },

  {
    "key": "ctrl+=",
    "command": "editor.action.formatSelection",
    "when": "editorTextFocus && !editorReadonly && editor.hasSelection",
    "comment": "vim: ctrl+= (format buffer)"
  },

  {
    "key": "ctrl+\\",
    "command": "workbench.action.togglePanel",
    "comment": "vim: ctrl+\\ (toggle panel)"
  },

  {
    "key": "ctrl+shift+\\",
    "command": "workbench.action.toggleSidebarVisibility",
    "comment": "vim: ctrl+shift+\\ (toggle sidebar)"
  },

  {
    "key": "ctrl+n",
    "command": "editor.action.marker.nextInFiles",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: ctrl+n (next error)"
  },

  {
    "key": "ctrl+p",
    "command": "editor.action.marker.prevInFiles",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: ctrl+p (prev error)"
  },

  {
    "key": "ctrl+s",
    "command": "???",
    "when": "editorTextFocus",
    "comment": "vim: ctrl+s (???)"
  },

  {
    "key": "ctrl+t",
    "command": "todo-tree-view.focus",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: ctrl+t (focus todo tree)"
  },

  // ---------------------------------------------------------------------------
  // Letters / Symbols
  // ---

  // NOTE: the settings.json file which augments this file is responsible for
  // some of the keybindings which augment the Vim plugin's keybindings.

  // NOTE: this toggles line blame for the file...if scrolling seems janky it's
  // best to toggle it on/off per line as you are curious re: a specific line.
  {
    "key": "shift+b",
    "command": "gitlens.toggleLineBlame",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: B (toggle line blame)"
  },

  {
    "key": "shift+e",
    "command": "code-runner.run",
    "when": "editorTextFocus && editor.hasSelection",
    "comment": "vim: E (evaluate selection)"
  },

  {
    "key": "shift+h",
    "command": "editor.action.showHover",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: H (hover help)"
  },

  {
    "key": "shift+k",
    "command": "???",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: K (???)"
  },

  {
    "key": "shift+l",
    "command": "???",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: L (???)"
  },

  {
    "key": "g l",
    "command": "editor.action.marker.next",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: L (next diagnostic)"
  },

  {
    "key": "shift+m",
    "command": "editor.action.inspectTMScopes",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: M (highlight mapping)"
  },

  /* SEE: settings.json for implementation
  {
    "key": "shift+q",
    "comment": "vim: Q (re-run last @q)"
  },
  */

  /* SEE: settings.json for implementation
  {
    "key": "shift+u",
    "comment": "vim: U (toggle case)"
  },
  */

  {
    "key": "shift+w",
    "command": "references-view.find",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: W (where)"
  },

  /* SEE: settings.json for implementation
  {
    "key": "shift+y",
    "comment": "vim: Y (yank to eol)"
  },
  */

  {
    "key": "\\",
    "command": "workbench.action.toggleZenMode",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: \\ (toggle zen mode)"
  },

  {
    "key": "shift+-",
    "command": "editor.action.marker.next",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: _ (next marker)"
  },

  // ---------------------------------------------------------------------------
  // Search Panel
  // ---

  // find word in workspac (built-in)
  {
    "key": "ctrl+/",
    "command": "filesExplorer.findInWorkspace",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>fW (find word in files)"
  },

  // find word in files (built-in)
  {
    "key": "ctrl+]",
    "command": "workbench.action.findInFiles",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: ^] (find word in files)"
  },

  {
    "key": "ctrl+n",
    "command": "search.action.focusNextSearchResult",
    "when": "hasSearchResult && searchViewletVisible",
    "comment": "next search result"
  },

  {
    "key": "ctrl+p",
    "command": "search.action.focusPreviousSearchResult",
    "when": "hasSearchResult && searchViewletVisible",
    "comment": "previous search result"
  },

  // close on escape, then move back to editor
  {
    "key": "escape",
    "command": "runCommands",
    "args": {
      "commands": [
        "workbench.files.action.focusFilesExplorer",
        "workbench.action.focusActiveEditorGroup"
      ]
    },
    "when": "!editorFocus && searchViewletVisible",
    "comment": "vim: <Esc> (close search and move back to editor)"
  },

  // ---------------------------------------------------------------------------
  // Split Management
  // ---

  {
    "key": "ctrl+shift+d",
    "command": "workbench.action.splitEditorDown",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "iterm2v3: (split vertically)"
  },

  {
    "key": "ctrl+w",
    "command": "workbench.action.joinAllGroups",
    "when": "editorFocus"
  },

  // ---------------------------------------------------------------------------
  // Suggestions
  // ---

  // TODO: some way to say "stop suggesting" for a while?

  // Provide a way to insert a tab when in insert mode
  {
    "key": "ctrl+]",
    "command": "type",
    "args": {
      "text": "\t"
    },
    "when": "editorTextFocus && vim.active && vim.mode === 'Insert'",
    "comment": "vim: ctrl+] (insert tab)"
  },

  // Select the next inline suggestion
  {
    "key": "ctrl+n",
    "command": "editor.action.inlineSuggest.next",
    "when": "editorTextFocus && inlineSuggestionVisible",
    "comment": "vim: ctrl+n (next suggestion)"
  },

  // Select the previous inline suggestion
  {
    "key": "ctrl+p",
    "command": "editor.action.inlineSuggest.prev",
    "when": "editorTextFocus && inlineSuggestionVisible",
    "comment": "vim: ctrl+p (prev suggestion)"
  },

  {
    "key": "ctrl+;",
    "command": "editor.action.inlineSuggest.commit",
    "when": "editorTextFocus && inlineSuggestionVisible",
    "comment": "vim: ctrl+; (accept suggestion)"
  },

  {
    "key": "ctrl+,",
    "command": "editor.action.inlineSuggest.acceptNextWord",
    "when": "editorTextFocus && inlineSuggestionVisible",
    "comment": "vim: ctrl+, (accept next word)"
  },

  {
    "key": "ctrl+.",
    "command": "editor.action.inlineSuggest.acceptNextLine",
    "when": "editorTextFocus && inlineSuggestionVisible",
    "comment": "vim: ctrl+. (accept next line)"
  },

  // ---------------------------------------------------------------------------
  // Terminal
  // ---

  {
    "key": "ctrl+`",
    "command": "workbench.action.terminal.toggleTerminal",
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Visual')",
    "comment": "vim: <leader>tt (toggle terminal)"
  },

  // NOTE: you can also use cmd+shift+] and cmd+shift+[ for terminal groups
  {
    "key": "ctrl+tab",
    "command": "workbench.action.terminal.focusNext",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus",
    "comment": "iterm2v3: (next tab)"
  },

  {
    "key": "ctrl+shift+tab",
    "command": "workbench.action.terminal.focusPrevious",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus",
    "comment": "iterm2v3: (previous tab)"
  },

  {
    "key": "cmd+shift+d",
    "command": "workbench.action.terminal.split",
    "when": "terminalFocus",
    "comment": "iterm: cmd+shift+d (split terminal)"
  },

  {
    "key": "ctrl+h",
    "command": "workbench.action.terminal.focusPreviousPane",
    "when": "terminalFocus"
  },

  {
    "key": "ctrl+l",
    "command": "workbench.action.terminal.focusNextPane",
    "when": "terminalFocus"
  },

  {
    "key": "ctrl+w",
    "command": "workbench.action.terminal.kill",
    "when": "terminalFocus"
  },

  // ---------------------------------------------------------------------------
  // Window / Pane Navigation
  // ---

  // Project / Workspace

  {
    "key": "alt+cmd+right",
    "command": "workbench.action.showNextWindowTab"
  },
  {
    "key": "alt+cmd+left",
    "command": "workbench.action.showPreviousWindowTab"
  },

  // Panel Pane Navigation

  {
    "key": "ctrl+alt+down",
    "command": "workbench.action.closePanel"
  },

  {
    "key": "ctrl+alt+up",
    "command": "workbench.action.focusPanel"
  },

  {
    "key": "ctrl+alt+right",
    "command": "workbench.action.nextPanelView"
  },

  {
    "key": "ctrl+alt+left",
    "command": "workbench.action.previousPanelView"
  },

  // ---
  // Panel <- Left
  // ---

  {
    "key": "ctrl+h",
    "command": "workbench.action.navigateLeft",
    "when": "editorFocus"
  },

  {
    "key": "ctrl+h",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "sideBarFocus"
  },

  {
    "key": "ctrl+h",
    "command": "workbench.action.navigateLeft",
    "when": "!editorFocus && !sidebarFocus && !panelFocus"
  },

  // ---
  // Panel -> Right
  // ---

  {
    "key": "ctrl+l",
    "command": "workbench.action.navigateRight",
    "when": "editorFocus"
  },

  {
    "key": "ctrl+l",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "sideBarFocus"
  },

  {
    "key": "ctrl+l",
    "command": "workbench.action.navigateRight",
    "when": "!editorFocus && !sidebarFocus && !panelFocus"
  },

  // ---
  // Panel Down
  // ---

  {
    "key": "ctrl+j",
    "command": "workbench.action.navigateDown",
    "when": "editorFocus"
  },

  {
    "key": "ctrl+j",
    "command": "workbench.action.navigateDown",
    "when": "!editorFocus && !sidebarFocus && !panelFocus"
  },

  // ---
  // Panel Up
  // ---

  {
  "key": "ctrl+k",
  "command": "-deleteAllRight",
  "when": "textInputFocus && !editorReadonly"
  },

  {
    "key": "ctrl+k",
    "command": "workbench.action.navigateUp",
    "when": "editorFocus"
  },

  {
    "key": "ctrl+k",
    "command": "workbench.action.navigateUp",
    "when": "(!editorTextFocus && !sidebarFocus) || (inputFocus && !panelFocus)"
  },

  {
    "key": "ctrl+k",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "!editorFocus && !sidebarFocus && !panelFocus && !inputFocus"
  },
]

/* -----------------------------------------------------------------------------
 * end
 * ========================================================================== */
